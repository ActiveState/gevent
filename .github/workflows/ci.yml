###
# Initially copied from
# https://github.com/actions/starter-workflows/blob/main/ci/python-package.yml
#
# Original comment follows.
###
###
# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
###

###
# Important notes on GitHub actions:
#
# - We only get 2,000 free minutes a month
# - We only get 500MB of artifact storage
# - Cache storage is limited to 7 days and 5GB.
# - macOS minutes are 10x as expensive as Linux minutes
# - windows minutes are twice as expensive.
#
# So keep those workflows light.
#
# In December 2020, github only supports x86/64. If we wanted to test
# gevent on other architectures, we might be able to use docker
# emulation, but there's no native support.
#
# Another major downside: You can't just re-run the job for one part
# of the matrix. So if there's a transient test failure that hit, say, 3.8,
# to get a clean run every version of Python runs again. That's bad.
# https://github.community/t/ability-to-rerun-just-a-single-job-in-a-workflow/17234/65

name: gevent testing


# Triggers the workflow on push or pull request events
on: [push, pull_request]
# Limiting to particular branches might be helpful to conserve minutes.
#on:
  # push:
  #   branches: [ $default-branch ]
  # pull_request:
  #   branches: [ $default-branch ]


jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [2.7, pypy2, pypy3, 3.6, 3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest]
        exclude:
          - os: macos-latest
            python-version: pypy2
          - os: macos-latest
            python-version: pypy3
          - os: macos-latest
            python-version: 3.5
          - os: macos-latest
            python-version: 3.6
    env:
      # XXX: Can't seem to set these globally. ``defaults.env`` is not
      # a thing.
      PYTHONHASHSEED: 8675309
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      PIP_UPGRADE_STRATEGY: eager
      # Don't get warnings about Python 2 support being deprecated. We
      # know. The env var works for pip 20.
      PIP_NO_PYTHON_VERSION_WARNING: 1
      PIP_NO_WARN_SCRIPT_LOCATION: 1
      GEVENTSETUP_EV_VERIFY: 1
      # Disable some warnings produced by libev especially and also some Cython generated code.
      # These are shared between GCC and clang so it must be a minimal set.
      # TODO: Figure out how to set env vars per platform without resolting to inline scripting.
      # Note that changing the value of these variables invalidates configure caches
      CFLAGS: -Ofast -pipe -Wno-strict-aliasing -Wno-comment
      CPPFLAGS: -DEV_VERIFY=1
      # Uploading built wheels for releases.
      # TWINE_PASSWORD is encrypted and stored directly in the
      # travis repo settings.
      TWINE_USERNAME: __token__
      ###
      # caching
      ###
      CCACHE_DIR: ~/.ccache
      CC: "ccache gcc"
      CCACHE_NOCPP2: true
      CCACHE_SLOPPINESS: file_macro,time_macros,include_file_ctime,include_file_mtime
      CCACHE_NOHASHDIR: true

      ###
      # Part of caching; disabled for now.
      #
      # BUILD_RUNTIMES: $HOME/.runtimes
      # BUILD_LIBS: $HOME/.libs
      #
      # LDFLAGS: "-L$BUILD_LIBS/lib"
      # LD_LIBRARY_PATH: "$BUILD_LIBS/lib"
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install ccache (ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo apt-get install -y ccache
      - name: Install ccache (macos)
        if: startsWith(runner.os, 'macOS')
        run: |
          sudo brew install ccache

      ###
      # Caching.
      # This actually *restores* a cache and schedules a cleanup action
      # to save the cache. So it must come before the thing we want to use
      # the cache.
      ###
      - name: Cache ~/.ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache/
          key: ${{ runner.os }}-ccache

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Cache config.cache
        # Store the configure caches. Having a cache can speed up c-ares
        # configure from 2-3 minutes to 20 seconds.
        uses: actions/cache@v2
        with:
          path: deps/*/config.cache
          # XXX: This should probably include a hash of each configure script
          # We don't have a restore-keys that doesn't include the CFLAGS becouse
          # the scripts fail to run if they get different CFLAGS, and GHA offers no
          # way to manually clear the cache.
          # At one time, we had a restore-key configured, and it still seems to be used
          # even without that setting here. The whole thing is being matched even without
          # the CFLAGS matching. Perhaps the - is a generic search separator?
          key: ${{ runner.os }}-configcache2-${{ matrix.python-version }}-${{ env.CFLAGS }}

      # Install gevent. Yes, this will create different files each time,
      # leading to a fresh cache. But because of CCache stats, we had already been doing
      # that (before we learned about CCACHE_NOSTATS).
      # We don't install using the requirements file for speed (reduced deps) and because an editable
      # install doesn't work in the cache.
      # First, the build dependencies (see setup.cfg)
      # so that we don't have to use build isolation and can better use the cache;
      # Note that we can't use -U for cffi and greenlet on PyPy.
      # The -q is because PyPy2 sometimes started raising
      #   UnicodeEncodeError: 'ascii' codec can't encode character u'\u2588' in position 6: ordinal not in range(128)
      # when downloading files. This started sometime in mid 2020. It's from
      # pip's vendored progress.bar class.
      - name: Install dependencies
        run: |
          pip install -U pip
          pip install -U -q setuptools wheel twine
          pip install -q -U 'faulthandler; python_version == "2.7" and platform_python_implementation == "CPython"'
          pip install -q -U 'cffi;platform_python_implementation=="CPython"'
          pip install -q -U 'cython>=3.0a5'
          pip install 'greenlet>=1.0a1;platform_python_implementation=="CPython"'

      - name: Build gevent
        run: |
          # Next, build the wheel *in place*. This helps ccache, and also lets us cache the configure
          # output (pip install uses a random temporary directory, making this difficult)
          python setup.py bdist_wheel
      - name: Check gevent build
        run: |
          ls -l dist
          twine check dist/*
      - name: Install gevent
        run: |
          pip install -U --no-compile `ls dist/*whl`[test]
      - name: Report environment details
        run: |
          python --version
          python -c 'import greenlet; print(greenlet, greenlet.__version__)'
          python -c 'import gevent; print(gevent.__version__)'
          python -c 'from gevent._compat import get_clock_info; print(get_clock_info("perf_counter"))'
          python -c 'import gevent.core; print(gevent.core.loop)'
          python -c 'import gevent.ares; print(gevent.ares)'
      - name: Lint (Python 3.9)
        if: ${{ matrix.python-version == 3.9 }}
        # We only need to do this on one version, and it should be Python 3, because
        # pylint has stopped updating for Python 2.
        # We do this here rather than a separate job to avoid the compilation overhead.
        # TODO: Revisit this when we have caching of that part.
        run: |
          pip install -U pylint
          python -m pylint --limit-inference-results=1 --rcfile=.pylintrc gevent
      - name: Run tests
        # Run them twice if they fail; this is to workaround the inability to re-run
        # single jobs. Ideally the testrunner should be updated to do this for just failing
        # tests.
        run: |
          python -m gevent.tests || python -m gevent.tests

# TODO:
# * Configure caching
#   - pip
#   - configure and build caches (see .travis.yml)
#   - ccache
# * coverage creation/upload/exclusion
# * manylinux builds and uploading
# * macos uploading
# * full testing matrix:
#   - Testing without embeds.
#   - file=thread
#   - different resolvers
#   - pure-python
#   - leak tests
